#!/bin/bash
# {{ ansible_managed }}
#
# Pulls the latest potos playbooks and then continues to run them against localhost.
# to enforce {{ potos_basics_client_name }} client specification.
# Notification and warning is displayed to the end user if 
{% if potos_basics_enable_reboot_reminder %}
#  * machine has not been rebooted for more than {{ potos_basics_reboot_reminder_days }} days
{% endif %}
#  * if Ansible ran into issues
# usage: {{ potos_basics_client_name | lower }}-ansible-pull [-h|--help] [-v|--verbose] [-r|--runtype <runtype>]
#
#  -h|--help     Print this Help.
#  -v|--verbose  Verbose mode -> All output is not piped to /dev/null
#  -r|--runtype  Run type -> {%- for r in potos_basics_runtypes -%}
{{ " '" }}{{ r.runtype }}{{ "'" }} 
{%- if not loop.last -%}
{{ ',' }}
{%- endif -%}
{%- endfor -%}"
#


# Die
die () {
    printf '%s\n' "$1" >&2
    exit 1
}

# Helpmenu
Help() {
    # Display Help
    echo "Pulls the latest potos playbooks and then continues to run them against localhost"
    echo "to enforce {{ potos_basics_client_name }} client specification."
    echo "Notification and warning is displayed to the end user if"
{% if potos_basics_enable_reboot_reminder %}
    echo "  * machine has not been rebooted for more than {{ potos_basics_reboot_reminder_days }} days"
{% endif %}
    echo "  * if Ansible ran into issues"
    echo
    echo "usage: {{ potos_basics_client_name | lower }}-ansible-pull [-h|--help] [-v|--verbose] [-r|--runtype <runtype>]"
    echo ""
    echo "  -h|--help     Print this Help."
    echo "  -v|--verbose  Verbose mode -> All output is not piped to /dev/null"
    echo "  -r|--runtype  Run type -> {%- for r in potos_basics_runtypes -%}
{{ ' "' }}{{ r.runtype }}{{ '"' }} 
{%- if not loop.last -%}
{{ ',' }}
{%- endif -%}
{%- endfor -%}"
    echo
}

# Set default variables
VERBOSE=false
RUN_TYPE="{{ potos_basics_runtypes[0].runtype | default('daily') }}"

# Parse arguments
while :; do
  case $1 in
    -h|-\?|--help)
      Help
      exit
      ;;
    -v|--verbose)
      VERBOSE=true
      ;;
    -r|--runtype|--run_type|--run_type)
      if [[ -z "$2" ]] || (
{%- for r in potos_basics_runtypes -%}
{{ '[[ "$2" != "' }}{{ r.runtype }}{{ '" ]]' }} 
{%- if not loop.last -%}
{{ ' && ' }}
{%- endif -%}
{%- endfor -%}
      ); then
        die "Error: Invalid run type! Allowed only:
{%- for r in potos_basics_runtypes -%}
{{ ' "' }}{{ r.runtype }}{{ '"' }} 
{%- if not loop.last -%}
{{ ',' }}
{%- endif -%}
{%- endfor -%}"
      else
        RUN_TYPE=$OPTARG
      fi
      shift
      ;;
    --) # end of all options
      shift
      break
      ;;
    -?*)
      printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
      ;;
    *) # default case: no more options, so break out of the loop
      break
  esac
  shift
done

{% if not potos_basics_always_verbose | default(false) %}
# if not verbose, pipe everything to /dev/null
if ! $VERBOSE; then
    exec >/dev/null 2>&1
fi
{% endif %}

# Check if working directory exists
[ -d '{{ potos_basics_ansible_workdir }}' ] || mkdir -p {{ potos_basics_ansible_workdir }}
cd {{ potos_basics_ansible_workdir }}

# If directory is git repository, then pull latest changes
if [ -d '.git' ] && [ -n "$(git remote)" ]; then
    git pull origin {{ potos_basics_playbook_version }}  2>&1
    # If git branch is wrong, checkout the correct one
    if [ "$(git branch | grep -E '^\*' | awk '{print $2}')" != "{{ potos_basics_playbook_version }}" ]; then
        git checkout {{ potos_basics_playbook_version }} 2>&1
    fi
# If directory is NOT git repository, then clone it
else
    git clone \
        -b {{ potos_basics_playbook_version }} \
        https://github.com/projectpotos/ansible-plays-potos.git \
        {{ potos_basics_ansible_workdir }} 2>&1
fi

# Adjust ansible config with client
/usr/bin/sed 's|/var/log/potos|{{ potos_basics_ansible_logdir }}|' {{ potos_basics_ansible_workdir }}/ansible.cfg

# Run Ansible with custom ansible.cfg, use flock to prevent concurrent runs
ANSIBLE_CONFIG={{ potos_basics_ansible_workdir }}/ansible.cfg
mkdir -p /var/lock
if [ ! -z /var/lock/{{ potos_basics_client_name | lower }}.lock ]; then
  touch /var/lock/{{ potos_basics_client_name | lower }}.lock
fi

exec {flockfd}</var/lock/{{ potos_basics_client_name | lower }}.lock
flock -x "$flockfd"

# Create virtualenv if not exists
if [[ -z "pyvenv.cfg" ]]; then
  virtualenv .
  source bin/activate
  pip3 install ansible-core=={{ potos_basics_ansible_version }}
else
  source bin/activate
fi

ansible-playbook {% if potos_basics_ansible_vault_key_check.stat.exists %}--vault-password-file=/etc/potos/ansible_vault_key {% endif %}-i {{ potos_basics_ansible_inventory }} prepare.yml -e "{{ potos_basics_ansible_runtype_var_name }}=$RUN_TYPE"
ansible-playbook {% if potos_basics_ansible_vault_key_check.stat.exists %}--vault-password-file=/etc/potos/ansible_vault_key {% endif %}-i {{ potos_basics_ansible_inventory }} playbook.yml -e "{{ potos_basics_ansible_runtype_var_name }}=$RUN_TYPE"

deactivate

exec {flockfd}<&-

logfile=$(grep 'log_path =' ansible.cfg | sed 's/log_path = //g')

# Check for Ansible failures in ansible.log
if [[ "0" -ne "$(test -e "$logfile" && grep failed= "$logfile" | tail -n1 | sed -e 's/.*failed=\([0-9]\+\).*/\1/')" ]]; then
    ANSIBLE_MESSAGE="Attention Ansible $1 failed!
    {%- for line in potos_basics_on_error_additional_lines -%}
    {{ '\n' }}{{ line }}
    {%- endfor -%}"
    /usr/bin/notify-send -u critical --expire-time=0 "${ANSIBLE_MESSAGE}"
    /usr/bin/wall "${ANSIBLE_MESSAGE}"
fi
{% if potos_basics_enable_reboot_reminder %}
# Check if machine has not been rebooted for more than {{ potos_basics_reboot_reminder_days }} days
UPTIME_DATE=$(uptime --since | awk '{print $1}' | tr -d '-')
TODAY=$(date +%Y%m%d)
DAYS_DIFF=$(echo "( `date -d ${TODAY} +%s` - `date -d ${UPTIME_DATE} +%s`) / (24*3600)" | bc)
if [ "${DAYS_DIFF}" -gt "{{ potos_basics_reboot_reminder_days }}" ]
then
    UPTIME_MESSAGE="Your `hostname` is up for ${DAYS_DIFF} days (> {{ potos_basics_reboot_reminder_days }})
In order to keep the security of your system up to date,
consider to reboot..."
    echo "${UPTIME_MESSAGE}"
    /usr/bin/notify-send -u normal --expire-time=0 "${UPTIME_MESSAGE}"
    /usr/bin/wall "${UPTIME_MESSAGE}"
fi
{% endif %}